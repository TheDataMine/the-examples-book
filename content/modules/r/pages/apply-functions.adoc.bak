= Apply Functions

== 'apply'

== 'lapply'

The 'lapply' is a function that applies a function 'FUN' to each element in a vector or list, and returns a list.

== Examples

=== How do I get the mean value of each vector in our list, 'my_list', in another list?

=== How can I find the average of several variables in the flight data, using only 1 line of R, with the 'lapply' function?

These are the flights from 2003:

We can break the flights into categories, depending on the 'Distance' of the flight: 

less than 100 miles; from 100 to 200 miles; from 200 to 500 miles; from 500 to 1000 miles; from 1000 to 2000 miles; more than 2000 miles

The numbers of flights in each category are:

Here are the average values of 4 variables, in each of these 6 categories:

OR, MUCH EASIER: We can do all of this with just 1 line of R. 

To make it easier to read, we can make a temporary data frame 'flights_by_distance' with these 4 variables. 

Then we split the data into 6 data frames, according to the 'Distance' of the flights, and we get the average 'DepDelay', 'ArrDelay', 'TaxiOut', and 'TaxiIn', in each of these 6 categories, with only 1 line of R. 

Notice that this agrees exactly with the results of the 4 separate 'tapply' functions, but it only takes us 1 call to the 'lapply' function!!

Some closing remarks about this example:

We use 'lapply' on a 'list'. It only takes two arguments, namely, a 'list' and a 'function' to run on each piece of our 'list'. In this case, we are taking an average ('colMeans') of each column in each piece of our 'list'.

The 'flights_by_distance' is a 'list' of 6 data frames You might want to check these out.

You can take the 'colMeans' within each of these data frames, like this:

but this is all accomplished by the 1-line 'lapply' that we did earlier, in a much easier way.

=== How can I find the average of several variables in the fars data, using only 1 line of R, with the 'lapply' function?

This is the fars data set, studied in STAT 19000 Project 6 (only the years 1975 to 1981)

We will learn a more efficient way to add the state names but for now, we do this in the same way as Project 6.

In Project 6, Question 2, we found the average number of 'DRUNK_DR', according to the state:

We might also want to find the average number fatalities ('FATALS') per accident, according to the state:

and the average number of people ('PERSONS') involved per accident, according to the state:

OR, MUCH EASIER: We can do all 3 of these calculations with just 1 line of R. 

To make it easier to read, we can make a temporary data frame 'accidents_by_state' with these 3 variables. 

Then we split the data into 51 data frames, according to the state where the accident occurred, and we get the average 'DRUNK_DR', 'FATALS', and 'PERSONS' in each of these 51 categories, with only 1 line of R. 

Notice that this agrees exactly with the results of the 3 separate 'tapply' functions, but it only takes us 1 call to the 'lapply' function!!

Again, some closing remarks: We use 'lapply' on a list. It only takes two arguments, namely, a 'list' and a 'function' to run on each piece of our 'list'. In this case, we are taking an average ('colMeans') of each column in each piece of our 'list'.

The 'accidents_by_state' is a list of 51 data frames. You might want to check these out.

You can also extract the elements of the list according to their names, e.g.,

but this is all accomplished by the 1-line 'lapply' that we did earlier, in a much easier way.

== 'sapply'

'sapply' is very similar to 'lapply', however, where 'lapply' always returns a list, 'sapply' will simplify the output of applying the function 'FUN' to each element.

If you recall, when accessing an element in a list using single brackets 'my_list[1]', the result will always return a list. If you access an element with double brackets 'my_list[[1]]', R will attempt to simplify the result. This is analogous to 'lapply' and 'sapply'.

== Examples

=== How do I get the mean value of each vector in our list, 'my_list', but rather than the result being a list, put the results in the simplest form?

=== Use the provided function to create a new column in the data.frame 'example_df' named 'transformed'. 'transformed' should contain 'TRUE' if the value in 'pre_transformed' is "t", 'FALSE' if it is "f", and 'NA' otherwise.

== 'tapply'

'tapply' is described in the documentation as a way to "apply a function to each cell of a ragged array, that is to each (non-empty) group of values given by a unique combination of the levels of certain factors." This is not a very useful description.

An alternative way to think about 'tapply', is as a function that allows you to calculate or apply 'function' to 'data1' when 'data1' is grouped by 'data2'.

'tapply(data1, data2, function)'

A concrete example would be getting the mean ('function') grade ('data1') when grade ('data1') is grouped by year ('data2'):

If your 'function' (in this case mean), requires extra arguments, you can pass those by name to 'tapply'. This is what the '...' argument in 'tapply' is for. For example, if we want our mean function to remove 'NA's prior to calculating a mean we could do the following:

== Examples

=== Amazon fine food tapply example

Here is an example using the Amazon fine food reviews:

This is the data source: https://www.kaggle.com/snap/amazon-fine-food-reviews/

The people who wrote the most reviews are:

In particular, user A3OXHLG6DIBRW8 wrote the most reviews.

The total number of people who read reviews that were written by A3OXHLG6DIBRW8 is:

The number of people who found those reviews (written by A3OXHLG6DIBRW8) to be helpful is:

So, altogether, when people read the reviews written by user A3OXHLG6DIBRW8, these reviews were rated as helpful 0.9795918 of the time.

Now we can do this again, for all users.

The total number of people who read reviews altogether, grouped by the user who wrote the review, is:

The total number of people who rated reviews as helpful, grouped by the user who wrote the review, is:

The percentages of people who found reviews to be helpful, grouped according to who wrote the review, are:

We can double-check our result for user "A3OXHLG6DIBRW8" as follows: